#!/usr/bin/env python3
from leankitbackend.date_analysis import cvt_d
from leankitbackend.util import import_data
from leankitbackend.leankitcards import Leankit_Cards
from os import chdir, path, listdir
from collections import defaultdict
from ast import literal_eval
import json


def import_cards(file):
    # Cards Data
    Cards_list = import_data(file)
    Cards = Leankit_Cards(Cards_list)
    return Cards


def input_files(folder):
    '''
    Give a sorted list of json files containing Card informations
    these files are generated by a cron job
    '''
    d_format = '%Y-%m-%d %H:%M:%S.%f'
    start = 'card_data_'
    end = '.json'

    def date_f(file):
        data = file.replace(start, '')
        data = data.replace(end, '')
        return cvt_d(data, d_format)

    def f(file):
        return file.startswith(start) and file.endswith(end)

    if isinstance(folder, str):
        folder_c = listdir(folder)
    else:
        folder_c = folder

    ret_lst = [[file, date_f(file)] for file in folder_c
               if file.startswith(start) and file.endswith(end)]
    ret_lst = sorted(ret_lst, key=lambda x: x[1])
    return ret_lst


def imported_files(folder, file_name):
    '''
    Generate a list of imported file from a record file that
    contain a list of file being imported
    '''
    imported_files = []
    # chdir(folder)
    file_name = path.join(folder, file_name)
    def check(lst, obj=str):
        return all(isinstance(x, obj) for x in lst)

    if path.exists(file_name) is True:
        with open(file_name, 'r') as out:
            try:
                tmp = literal_eval(out.read())
                if isinstance(tmp, list) and check(tmp):
                    imported_files = input_files(tmp)
            except SyntaxError:
                pass
    return imported_files


def delta_files(folder, file_name='imported_files'):
    '''
    Return a list of file to import
    '''
    imported = imported_files(folder, file_name)
    in_folder = input_files(folder)
    ret_lst = [x for x in in_folder if x not in imported]
    return ret_lst


def import_history(folder, files, file_name):
    # chdir(folder)
    # files = input_files(folder)
    Cards_dict = {}
    for i, file in enumerate(files):
        name, date_fi = file
        name = path.join(folder, name)
        Cards_dict[date_fi] = import_cards(name)
        print('{} {} {}'.format(i, name, Cards_dict[date_fi].len))

    record_lst = [item[0] for item in files]
    file_name = path.join(folder, file_name)
    if path.exists(file_name):
        with open(file_name, 'r') as out:
            lst = literal_eval(out.read())
        record_lst.extend(lst)

    with open(file_name, 'w') as out:
        out.write(str(record_lst))

    return Cards_dict


def Dict_Cards_export(dic, file_name, d_format):
    dump = {cvt_d(key, d_format): value.json
            for key, value in dic.items()}

    with open(file_name, 'w') as out:
        json.dump(dump, out)


def Dict_Cards_import(file_name, d_format):
    def f(key, value):
        a = cvt_d(key, d_format)
        tmp = Leankit_Cards(value, a)
        return tmp

    dump = import_data(file_name)
    dic = {cvt_d(key, d_format): Leankit_Cards(value)
           for key, value in dump.items()}

    return dic


def files_to_import(folder, file_name_records, file_name_cards, d_format):

    def g(dic):
        '''
        Get the oldest record per day
        '''
        ddic = defaultdict(list)
        for key, value in dic.items():
            ddic[key.isocalendar()].append(value)
        ddic = dict(ddic)

        for key, value in ddic.items():
            tmp = max(value, key=lambda x: x.date)
            ddic[key] = tmp

        ret_dic = {value.date: value for value in ddic.values()}
        ret_list = sorted(ret_dic.keys())

        return ret_list, ret_dic

    # chdir(folder)
    a = [file_name_records, file_name_cards]
    b = [path.join(folder, i) for i in a]
    if all(map(path.exists, b)):
        file_name_cards = path.join(folder, file_name_cards)
        dic = Dict_Cards_import(file_name_cards, d_format)
        lst = delta_files(folder, file_name_records)
        add_dic = import_history(folder, lst, file_name_records)
        ret_dic = {**dic, **add_dic}

    else:
        lst = input_files(folder)
        ret_dic = import_history(folder, lst, file_name_records)

    Dict_Cards_export(ret_dic, file_name_cards, d_format)

    lst_d = sorted(ret_dic.keys())
    for i in lst_d:
        ret_dic[i].date = i

    return g(ret_dic)
    # return g(ret_dic)


if __name__ == "__main__":
    pass

